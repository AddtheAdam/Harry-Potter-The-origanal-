import pygame
import sys
import random
import os

# Initialize Pygame
pygame.init()

# Set up the display
WIDTH, HEIGHT = 800, 600
screen = pygame.display.set_mode((WIDTH, HEIGHT))
pygame.display.set_caption("The World's Hardest Game by Sir Fartquad")

# Colors
WHITE = (255, 255, 255)
RED = (255, 0, 0)
BLUE = (0, 0, 255)
GREEN = (0, 255, 0)
GRAY = (128, 128, 128)
GOLD = (255, 215, 0)

# Player
player_size = 30
player_speed = 3

# Load player sprite
player_sprite = pygame.image.load(os.path.join("robber.png"))
player_sprite = pygame.transform.scale(player_sprite, (player_size, player_size))

# Enemies
enemy_size = 50
enemy_speed_multiplier = 1

# Barriers
barrier_width = 30

def check_overlap(rect1, rect2, min_distance=10):
    return rect1.colliderect(rect2.inflate(min_distance, min_distance))

def generate_non_overlapping_position(size, existing_rects, bounds):
    while True:
        x = random.randint(bounds[0], bounds[2] - size[0])
        y = random.randint(bounds[1], bounds[3] - size[1])
        new_rect = pygame.Rect(x, y, size[0], size[1])
        if not any(check_overlap(new_rect, rect) for rect in existing_rects):
            return x, y

# Font for displaying messages
font = pygame.font.SysFont(None, 55)

class Button:
    def __init__(self, x, y, width, height, text, color, text_color):
        self.rect = pygame.Rect(x, y, width, height)
        self.text = text
        self.color = color
        self.text_color = text_color
        self.font = pygame.font.SysFont(None, 32)

    def draw(self, screen):
        pygame.draw.rect(screen, self.color, self.rect)
        text_surface = self.font.render(self.text, True, self.text_color)
        text_rect = text_surface.get_rect(center=self.rect.center)
        screen.blit(text_surface, text_rect)

    def is_clicked(self, pos):
        return self.rect.collidepoint(pos)

class Confetti:
    def __init__(self):
        self.particles = []
        self.colors = [RED, BLUE, GREEN]
    
    def generate(self, x, y):
        self.particles = []
        for _ in range(1000):
            color = random.choice(self.colors)
            size = random.randint(5, 10)
            dx = random.uniform(-5, 5)
            dy = random.uniform(-5, 5)
            self.particles.append({'x': x, 'y': y, 'dx': dx, 'dy': dy, 'size': size, 'color': color})
    
    def update(self):
        for particle in self.particles:
            particle['x'] += particle['dx']
            particle['y'] += particle['dy']
            particle['dy'] += 0.1
    
    def draw(self, screen):
        for particle in self.particles:
            pygame.draw.circle(screen, particle['color'], (int(particle['x']), int(particle['y'])), particle['size'])

class Coin:
    def __init__(self, x, y):
        self.rect = pygame.Rect(x, y, 20, 20)
        self.collected = False

    def draw(self, screen):
        if not self.collected:
            pygame.draw.circle(screen, GOLD, self.rect.center, 10)

def generate_first_level():
    player_x, player_y = 50, HEIGHT // 2
    
    barriers = [
        pygame.Rect(0, 100, WIDTH, 50),  # Top barrier
        pygame.Rect(0, HEIGHT - 150, WIDTH, 50),  # Bottom barrier
        pygame.Rect(player_x + 2 * barrier_width, player_y - 120, barrier_width, 240)  # Spawn barrier
    ]
    
    enemies = []
    group_speed_x = 5 * enemy_speed_multiplier
    
    # Left group
    start_y = barriers[0].bottom + 25
    for i in range(3):
        enemy = pygame.Rect(0, start_y + i * (enemy_size * 2), enemy_size, enemy_size)
        enemies.append({"rect": enemy, "speed_x": group_speed_x, "speed_y": 0, "group": "left"})
    
    # Right group
    right_start_y = (barriers[0].bottom + barriers[1].top) // 2 - enemy_size
    for i in range(2):
        enemy = pygame.Rect(WIDTH - enemy_size, right_start_y + i * (enemy_size * 2), enemy_size, enemy_size)
        enemies.append({"rect": enemy, "speed_x": -group_speed_x, "speed_y": 0, "group": "right"})
    
    goal = pygame.Rect(WIDTH - 70, HEIGHT // 2 - 25, 50, 50)
    
    coins = [
        Coin(WIDTH // 4, HEIGHT // 2),
        Coin(WIDTH // 2, HEIGHT // 3),
        Coin(WIDTH * 3 // 4, HEIGHT * 2 // 3)
    ]
    
    return player_x, player_y, barriers, enemies, goal, coins

def check_overlap(rect1, rect2, min_distance=10):
    return rect1.colliderect(rect2.inflate(min_distance, min_distance))

def generate_non_overlapping_position(size, existing_rects, bounds):
    while True:
        x = random.randint(bounds[0], bounds[2] - size[0])
        y = random.randint(bounds[1], bounds[3] - size[1])
        new_rect = pygame.Rect(x, y, size[0], size[1])
        if not any(check_overlap(new_rect, rect) for rect in existing_rects):
            return x, y

def generate_random_level(level):
    barriers = []
    for _ in range(random.randint(3, 5 + level)):
        barrier_x = random.randint(0, WIDTH - barrier_width)
        barrier_y = random.randint(0, HEIGHT - barrier_width)
        barrier_height = random.randint(50, 200)
        barriers.append(pygame.Rect(barrier_x, barrier_y, barrier_width, barrier_height))

    # Generate player position
    player_x, player_y = generate_non_overlapping_position((player_size, player_size), barriers, (0, 0, WIDTH, HEIGHT))

    enemies = []
    for _ in range(random.randint(3, 5 + level)):
        enemy_x, enemy_y = generate_non_overlapping_position((enemy_size, enemy_size), barriers + [pygame.Rect(player_x, player_y, player_size, player_size)], (WIDTH // 4, 0, WIDTH, HEIGHT))
        speed_x = random.choice([-1, 1]) * random.randint(2, 4) * enemy_speed_multiplier
        speed_y = random.choice([-1, 1]) * random.randint(2, 4) * enemy_speed_multiplier
        enemies.append({
            "rect": pygame.Rect(enemy_x, enemy_y, enemy_size, enemy_size),
            "speed_x": speed_x,
            "speed_y": speed_y
        })

    # Generate goal position
    goal_x, goal_y = generate_non_overlapping_position((50, 50), barriers + [pygame.Rect(player_x, player_y, player_size, player_size)] + [e["rect"] for e in enemies], (WIDTH * 3 // 4, 0, WIDTH, HEIGHT))
    goal = pygame.Rect(goal_x, goal_y, 50, 50)

    coins = []
    for _ in range(3 + level):
        coin_x, coin_y = generate_non_overlapping_position((20, 20), barriers + [pygame.Rect(player_x, player_y, player_size, player_size)] + [e["rect"] for e in enemies] + [goal], (0, 0, WIDTH, HEIGHT))
        coins.append(Coin(coin_x, coin_y))

    return player_x, player_y, barriers, enemies, goal, coins
# Initialize game variables
current_level = 1
player_x, player_y, barriers, enemies, goal, coins = generate_first_level()
confetti = Confetti()
confetti_active = False
message_displayed = False
next_level_button = Button(WIDTH // 2 - 75, HEIGHT // 2 + 50, 150, 50, "Next Level", GREEN, WHITE)
pause_button = Button(WIDTH - 160, 10, 150, 50, "Pause", GRAY, WHITE)
deaths = 0
paused = False

# Game loop
clock = pygame.time.Clock()

def display_message(message):
    text = font.render(message, True, (0, 0, 0))
    text_rect = text.get_rect(center=(WIDTH // 2, HEIGHT // 2))
    screen.blit(text, text_rect)

def maintain_group_distance(group):
    for i in range(len(group) - 1):
        current = group[i]["rect"]
        next_enemy = group[i + 1]["rect"]
        distance = next_enemy.top - current.bottom
        if distance != enemy_size:
            move = (enemy_size - distance) / 2
            current.y -= move
            next_enemy.y += move

while True:
    for event in pygame.event.get():
        if event.type == pygame.QUIT:
            pygame.quit()
            sys.exit()
        if event.type == pygame.MOUSEBUTTONDOWN:
            if confetti_active and next_level_button.is_clicked(event.pos):
                current_level += 1
                player_x, player_y, barriers, enemies, goal, coins = generate_random_level(current_level)
                confetti_active = False
                message_displayed = False
                enemy_speed_multiplier += 0.2
                deaths = 0  # Reset the death counter
            if pause_button.is_clicked(event.pos):
                paused = not paused
                pause_button.text = "Resume" if paused else "Pause"
                pause_button.color = GREEN if paused else GRAY

    # Draw everything
    screen.fill(WHITE)
    
    if not confetti_active:
        if not paused:
            screen.blit(player_sprite, (player_x, player_y))
            for enemy in enemies:
                pygame.draw.rect(screen, RED, enemy["rect"])
            for barrier in barriers:
                pygame.draw.rect(screen, GRAY, barrier)
            pygame.draw.rect(screen, GREEN, goal)
            for coin in coins:
                coin.draw(screen)
        
        pause_button.draw(screen)
        
        if paused:
            display_message("PAUSED")
        
        # Display the death count
        death_text = font.render(f"Deaths: {deaths}", True, (0, 0, 0))
        screen.blit(death_text, (10, 10))

        # Display the coin count
        coins_collected = sum(1 for coin in coins if coin.collected)
        coin_text = font.render(f"Coins: {coins_collected}/{len(coins)}", True, (0, 0, 0))
        screen.blit(coin_text, (10, 70))
    else:
        confetti.update()
        confetti.draw(screen)
        next_level_button.draw(screen)

    # Player movement and game logic
    if not paused and not confetti_active:
        # Player movement
        keys = pygame.key.get_pressed()
        new_player_x = player_x
        new_player_y = player_y
        
        if keys[pygame.K_LEFT]:
            new_player_x -= player_speed
        if keys[pygame.K_RIGHT]:
            new_player_x += player_speed
        if keys[pygame.K_UP]:
            new_player_y -= player_speed
        if keys[pygame.K_DOWN]:
            new_player_y += player_speed

        # Check collision with barriers and screen edges
        new_player_rect = pygame.Rect(new_player_x, new_player_y, player_size, player_size)
        if not any(new_player_rect.colliderect(barrier) for barrier in barriers) and \
           0 <= new_player_x <= WIDTH - player_size and \
           0 <= new_player_y <= HEIGHT - player_size:
            player_x = new_player_x
            player_y = new_player_y

        # Update enemy positions and handle collisions
        if current_level == 1:
            left_group = [enemy for enemy in enemies if enemy["group"] == "left"]
            right_group = [enemy for enemy in enemies if enemy["group"] == "right"]

            for group in [left_group, right_group]:
                for enemy in group:
                    enemy["rect"].x += enemy["speed_x"]
                
                if group[0]["rect"].left <= 0 or group[-1]["rect"].right >= WIDTH:
                    for enemy in group:
                        enemy["speed_x"] = -enemy["speed_x"]

            maintain_group_distance(left_group)
            maintain_group_distance(right_group)

            for enemy in enemies:
                if enemy["rect"].top < barriers[0].bottom:
                    enemy["rect"].top = barriers[0].bottom
                elif enemy["rect"].bottom > barriers[1].top:
                    enemy["rect"].bottom = barriers[1].top
        else:
            for enemy in enemies:
                enemy["rect"].x += enemy["speed_x"]
                enemy["rect"].y += enemy["speed_y"]
                
                if enemy["rect"].left <= 0 or enemy["rect"].right >= WIDTH:
                    enemy["speed_x"] = -enemy["speed_x"]
                if enemy["rect"].top <= 0 or enemy["rect"].bottom >= HEIGHT:
                    enemy["speed_y"] = -enemy["speed_y"]
                
                for barrier in barriers:
                    if enemy["rect"].colliderect(barrier):
                        if abs(enemy["rect"].left - barrier.right) < 10 or abs(enemy["rect"].right - barrier.left) < 10:
                            enemy["speed_x"] = -enemy["speed_x"]
                        if abs(enemy["rect"].top - barrier.bottom) < 10 or abs(enemy["rect"].bottom - barrier.top) < 10:
                            enemy["speed_y"] = -enemy["speed_y"]

        # Check for collisions with player
        player_rect = pygame.Rect(player_x, player_y, player_size, player_size)
        if player_rect.collidelist([e["rect"] for e in enemies]) != -1:
            player_x, player_y = 50, HEIGHT // 2  # Reset player position
            deaths += 1  # Increment the death counter

        # Check for coin collection
        for coin in coins:
            if not coin.collected and player_rect.colliderect(coin.rect):
                coin.collected = True

        # Check for goal (only if all coins are collected)
        if player_rect.colliderect(goal) and all(coin.collected for coin in coins):
            if not message_displayed:
                screen.fill(WHITE)
                display_message(f"Congratulations! You completed level {current_level}!")
                pygame.display.flip()
                pygame.time.wait(2000)
                message_displayed = True
                confetti.generate(WIDTH // 2, HEIGHT // 2)
                confetti_active = True
                deaths = 0  # Reset the death counter

    # Update the display
    pygame.display.flip()

    # Cap the frame rate
    clock.tick(60)